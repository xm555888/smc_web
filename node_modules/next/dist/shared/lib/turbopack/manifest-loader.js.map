{"version":3,"sources":["../../../../src/shared/lib/turbopack/manifest-loader.ts"],"sourcesContent":["import type {\n  EdgeFunctionDefinition,\n  MiddlewareManifest,\n} from '../../../build/webpack/plugins/middleware-plugin'\nimport type {\n  StatsAsset,\n  StatsChunk,\n  StatsChunkGroup,\n  StatsModule,\n  StatsCompilation as WebpackStats,\n} from 'webpack'\nimport type { BuildManifest } from '../../../server/get-page-files'\nimport type { AppBuildManifest } from '../../../build/webpack/plugins/app-build-manifest-plugin'\nimport type { PagesManifest } from '../../../build/webpack/plugins/pages-manifest-plugin'\nimport { pathToRegexp } from 'next/dist/compiled/path-to-regexp'\nimport type { ActionManifest } from '../../../build/webpack/plugins/flight-client-entry-plugin'\nimport type { NextFontManifest } from '../../../build/webpack/plugins/next-font-manifest-plugin'\nimport type { REACT_LOADABLE_MANIFEST } from '../constants'\nimport {\n  APP_BUILD_MANIFEST,\n  APP_PATHS_MANIFEST,\n  BUILD_MANIFEST,\n  INTERCEPTION_ROUTE_REWRITE_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_MANIFEST,\n  NEXT_FONT_MANIFEST,\n  PAGES_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST,\n  WEBPACK_STATS,\n} from '../constants'\nimport { join, posix } from 'path'\nimport { readFile } from 'fs/promises'\nimport type { SetupOpts } from '../../../server/lib/router-utils/setup-dev-bundler'\nimport { deleteCache } from '../../../server/dev/require-cache'\nimport { writeFileAtomic } from '../../../lib/fs/write-atomic'\nimport { isInterceptionRouteRewrite } from '../../../lib/generate-interception-routes-rewrites'\nimport {\n  type ClientBuildManifest,\n  normalizeRewritesForBuildManifest,\n  srcEmptySsgManifest,\n  processRoute,\n} from '../../../build/webpack/plugins/build-manifest-plugin'\nimport getAssetPathFromRoute from '../router/utils/get-asset-path-from-route'\nimport { getEntryKey, type EntryKey } from './entry-key'\nimport type { CustomRoutes } from '../../../lib/load-custom-routes'\nimport { getSortedRoutes } from '../router/utils'\nimport { existsSync } from 'fs'\nimport {\n  addMetadataIdToRoute,\n  addRouteSuffix,\n  removeRouteSuffix,\n} from '../../../server/dev/turbopack-utils'\nimport { tryToParsePath } from '../../../lib/try-to-parse-path'\nimport type { Entrypoints } from '../../../build/swc/types'\n\ninterface InstrumentationDefinition {\n  files: string[]\n  name: 'instrumentation'\n}\n\ntype TurbopackMiddlewareManifest = MiddlewareManifest & {\n  instrumentation?: InstrumentationDefinition\n}\n\nconst getManifestPath = (\n  page: string,\n  distDir: string,\n  name: string,\n  type: string\n) => {\n  let manifestPath = posix.join(\n    distDir,\n    `server`,\n    type,\n    type === 'middleware' || type === 'instrumentation'\n      ? ''\n      : type === 'app'\n        ? page\n        : getAssetPathFromRoute(page),\n    name\n  )\n  return manifestPath\n}\n\nasync function readPartialManifest<T>(\n  distDir: string,\n  name:\n    | typeof MIDDLEWARE_MANIFEST\n    | typeof BUILD_MANIFEST\n    | typeof APP_BUILD_MANIFEST\n    | typeof PAGES_MANIFEST\n    | typeof WEBPACK_STATS\n    | typeof APP_PATHS_MANIFEST\n    | `${typeof SERVER_REFERENCE_MANIFEST}.json`\n    | `${typeof NEXT_FONT_MANIFEST}.json`\n    | typeof REACT_LOADABLE_MANIFEST,\n  pageName: string,\n  type: 'pages' | 'app' | 'middleware' | 'instrumentation' = 'pages'\n): Promise<T> {\n  const page = pageName\n  const isSitemapRoute = /[\\\\/]sitemap(.xml)?\\/route$/.test(page)\n  let manifestPath = getManifestPath(page, distDir, name, type)\n\n  // Check the ambiguity of /sitemap and /sitemap.xml\n  if (isSitemapRoute && !existsSync(manifestPath)) {\n    manifestPath = getManifestPath(\n      pageName.replace(/\\/sitemap\\/route$/, '/sitemap.xml/route'),\n      distDir,\n      name,\n      type\n    )\n  }\n  // existsSync is faster than using the async version\n  if (!existsSync(manifestPath) && page.endsWith('/route')) {\n    // TODO: Improve implementation of metadata routes, currently it requires this extra check for the variants of the files that can be written.\n    let metadataPage = addRouteSuffix(\n      addMetadataIdToRoute(removeRouteSuffix(page))\n    )\n    manifestPath = getManifestPath(metadataPage, distDir, name, type)\n  }\n  return JSON.parse(await readFile(posix.join(manifestPath), 'utf-8')) as T\n}\n\nexport class TurbopackManifestLoader {\n  private actionManifests: Map<EntryKey, ActionManifest> = new Map()\n  private appBuildManifests: Map<EntryKey, AppBuildManifest> = new Map()\n  private appPathsManifests: Map<EntryKey, PagesManifest> = new Map()\n  private buildManifests: Map<EntryKey, BuildManifest> = new Map()\n  private fontManifests: Map<EntryKey, NextFontManifest> = new Map()\n  private middlewareManifests: Map<EntryKey, TurbopackMiddlewareManifest> =\n    new Map()\n  private pagesManifests: Map<string, PagesManifest> = new Map()\n  private webpackStats: Map<EntryKey, WebpackStats> = new Map()\n  private encryptionKey: string\n\n  private readonly distDir: string\n  private readonly buildId: string\n\n  constructor({\n    distDir,\n    buildId,\n    encryptionKey,\n  }: {\n    buildId: string\n    distDir: string\n    encryptionKey: string\n  }) {\n    this.distDir = distDir\n    this.buildId = buildId\n    this.encryptionKey = encryptionKey\n  }\n\n  delete(key: EntryKey) {\n    this.actionManifests.delete(key)\n    this.appBuildManifests.delete(key)\n    this.appPathsManifests.delete(key)\n    this.buildManifests.delete(key)\n    this.fontManifests.delete(key)\n    this.middlewareManifests.delete(key)\n    this.pagesManifests.delete(key)\n    this.webpackStats.delete(key)\n  }\n\n  async loadActionManifest(pageName: string): Promise<void> {\n    this.actionManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        `${SERVER_REFERENCE_MANIFEST}.json`,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private async mergeActionManifests(manifests: Iterable<ActionManifest>) {\n    type ActionEntries = ActionManifest['edge' | 'node']\n    const manifest: ActionManifest = {\n      node: {},\n      edge: {},\n      encryptionKey: this.encryptionKey,\n    }\n\n    function mergeActionIds(\n      actionEntries: ActionEntries,\n      other: ActionEntries\n    ): void {\n      for (const key in other) {\n        const action = (actionEntries[key] ??= {\n          workers: {},\n          layer: {},\n        })\n        Object.assign(action.workers, other[key].workers)\n        Object.assign(action.layer, other[key].layer)\n      }\n    }\n\n    for (const m of manifests) {\n      mergeActionIds(manifest.node, m.node)\n      mergeActionIds(manifest.edge, m.edge)\n    }\n\n    return manifest\n  }\n\n  private async writeActionManifest(): Promise<void> {\n    const actionManifest = await this.mergeActionManifests(\n      this.actionManifests.values()\n    )\n    const actionManifestJsonPath = join(\n      this.distDir,\n      'server',\n      `${SERVER_REFERENCE_MANIFEST}.json`\n    )\n    const actionManifestJsPath = join(\n      this.distDir,\n      'server',\n      `${SERVER_REFERENCE_MANIFEST}.js`\n    )\n    const json = JSON.stringify(actionManifest, null, 2)\n    deleteCache(actionManifestJsonPath)\n    deleteCache(actionManifestJsPath)\n    await writeFileAtomic(actionManifestJsonPath, json)\n    await writeFileAtomic(\n      actionManifestJsPath,\n      `self.__RSC_SERVER_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadAppBuildManifest(pageName: string): Promise<void> {\n    this.appBuildManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        APP_BUILD_MANIFEST,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private mergeAppBuildManifests(manifests: Iterable<AppBuildManifest>) {\n    const manifest: AppBuildManifest = {\n      pages: {},\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.pages, m.pages)\n    }\n    return manifest\n  }\n\n  private async writeAppBuildManifest(): Promise<void> {\n    const appBuildManifest = this.mergeAppBuildManifests(\n      this.appBuildManifests.values()\n    )\n    const appBuildManifestPath = join(this.distDir, APP_BUILD_MANIFEST)\n    deleteCache(appBuildManifestPath)\n    await writeFileAtomic(\n      appBuildManifestPath,\n      JSON.stringify(appBuildManifest, null, 2)\n    )\n  }\n\n  async loadAppPathsManifest(pageName: string): Promise<void> {\n    this.appPathsManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        APP_PATHS_MANIFEST,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private async writeAppPathsManifest(): Promise<void> {\n    const appPathsManifest = this.mergePagesManifests(\n      this.appPathsManifests.values()\n    )\n    const appPathsManifestPath = join(\n      this.distDir,\n      'server',\n      APP_PATHS_MANIFEST\n    )\n    deleteCache(appPathsManifestPath)\n    await writeFileAtomic(\n      appPathsManifestPath,\n      JSON.stringify(appPathsManifest, null, 2)\n    )\n  }\n\n  private async writeWebpackStats(): Promise<void> {\n    const webpackStats = this.mergeWebpackStats(this.webpackStats.values())\n    const path = join(this.distDir, 'server', WEBPACK_STATS)\n    deleteCache(path)\n    await writeFileAtomic(path, JSON.stringify(webpackStats, null, 2))\n  }\n\n  async loadBuildManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.buildManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(this.distDir, BUILD_MANIFEST, pageName, type)\n    )\n  }\n\n  async loadWebpackStats(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.webpackStats.set(\n      getEntryKey(type, 'client', pageName),\n      await readPartialManifest(this.distDir, WEBPACK_STATS, pageName, type)\n    )\n  }\n\n  private mergeWebpackStats(statsFiles: Iterable<WebpackStats>): WebpackStats {\n    const entrypoints: Record<string, StatsChunkGroup> = {}\n    const assets: Map<string, StatsAsset> = new Map()\n    const chunks: Map<string, StatsChunk> = new Map()\n    const modules: Map<string | number, StatsModule> = new Map()\n\n    for (const statsFile of statsFiles) {\n      if (statsFile.entrypoints) {\n        for (const [k, v] of Object.entries(statsFile.entrypoints)) {\n          if (!entrypoints[k]) {\n            entrypoints[k] = v\n          }\n        }\n      }\n\n      if (statsFile.assets) {\n        for (const asset of statsFile.assets) {\n          if (!assets.has(asset.name)) {\n            assets.set(asset.name, asset)\n          }\n        }\n      }\n\n      if (statsFile.chunks) {\n        for (const chunk of statsFile.chunks) {\n          if (!chunks.has(chunk.name)) {\n            chunks.set(chunk.name, chunk)\n          }\n        }\n      }\n\n      if (statsFile.modules) {\n        for (const module of statsFile.modules) {\n          const id = module.id\n          if (id != null) {\n            // Merge the chunk list for the module. This can vary across endpoints.\n            const existing = modules.get(id)\n            if (existing == null) {\n              modules.set(id, module)\n            } else if (module.chunks != null && existing.chunks != null) {\n              for (const chunk of module.chunks) {\n                if (!existing.chunks.includes(chunk)) {\n                  existing.chunks.push(chunk)\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      entrypoints,\n      assets: [...assets.values()],\n      chunks: [...chunks.values()],\n      modules: [...modules.values()],\n    }\n  }\n\n  private mergeBuildManifests(manifests: Iterable<BuildManifest>) {\n    const manifest: Partial<BuildManifest> & Pick<BuildManifest, 'pages'> = {\n      pages: {\n        '/_app': [],\n      },\n      // Something in next.js depends on these to exist even for app dir rendering\n      devFiles: [],\n      ampDevFiles: [],\n      polyfillFiles: [],\n      lowPriorityFiles: [\n        `static/${this.buildId}/_ssgManifest.js`,\n        `static/${this.buildId}/_buildManifest.js`,\n      ],\n      rootMainFiles: [],\n      ampFirstPages: [],\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.pages, m.pages)\n      if (m.rootMainFiles.length) manifest.rootMainFiles = m.rootMainFiles\n      // polyfillFiles should always be the same, so we can overwrite instead of actually merging\n      if (m.polyfillFiles.length) manifest.polyfillFiles = m.polyfillFiles\n    }\n    return manifest\n  }\n\n  private async writeBuildManifest(\n    entrypoints: Entrypoints,\n    devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined,\n    productionRewrites: CustomRoutes['rewrites'] | undefined\n  ): Promise<void> {\n    const rewrites = productionRewrites ?? {\n      ...devRewrites,\n      beforeFiles: (devRewrites?.beforeFiles ?? []).map(processRoute),\n      afterFiles: (devRewrites?.afterFiles ?? []).map(processRoute),\n      fallback: (devRewrites?.fallback ?? []).map(processRoute),\n    }\n    const buildManifest = this.mergeBuildManifests(this.buildManifests.values())\n    const buildManifestPath = join(this.distDir, BUILD_MANIFEST)\n    const middlewareBuildManifestPath = join(\n      this.distDir,\n      'server',\n      `${MIDDLEWARE_BUILD_MANIFEST}.js`\n    )\n    const interceptionRewriteManifestPath = join(\n      this.distDir,\n      'server',\n      `${INTERCEPTION_ROUTE_REWRITE_MANIFEST}.js`\n    )\n    deleteCache(buildManifestPath)\n    deleteCache(middlewareBuildManifestPath)\n    deleteCache(interceptionRewriteManifestPath)\n    await writeFileAtomic(\n      buildManifestPath,\n      JSON.stringify(buildManifest, null, 2)\n    )\n    await writeFileAtomic(\n      middlewareBuildManifestPath,\n      // we use globalThis here because middleware can be node\n      // which doesn't have \"self\"\n      `globalThis.__BUILD_MANIFEST=${JSON.stringify(buildManifest)};`\n    )\n\n    const interceptionRewrites = JSON.stringify(\n      rewrites.beforeFiles.filter(isInterceptionRouteRewrite)\n    )\n\n    await writeFileAtomic(\n      interceptionRewriteManifestPath,\n      `self.__INTERCEPTION_ROUTE_REWRITE_MANIFEST=${JSON.stringify(\n        interceptionRewrites\n      )};`\n    )\n\n    const pagesKeys = [...entrypoints.page.keys()]\n    if (entrypoints.global.app) {\n      pagesKeys.push('/_app')\n    }\n    if (entrypoints.global.error) {\n      pagesKeys.push('/_error')\n    }\n\n    const sortedPageKeys = getSortedRoutes(pagesKeys)\n    const content: ClientBuildManifest = {\n      __rewrites: normalizeRewritesForBuildManifest(rewrites) as any,\n      ...Object.fromEntries(\n        sortedPageKeys.map((pathname) => [\n          pathname,\n          [`static/chunks/pages${pathname === '/' ? '/index' : pathname}.js`],\n        ])\n      ),\n      sortedPages: sortedPageKeys,\n    }\n    const buildManifestJs = `self.__BUILD_MANIFEST = ${JSON.stringify(\n      content\n    )};self.__BUILD_MANIFEST_CB && self.__BUILD_MANIFEST_CB()`\n    await writeFileAtomic(\n      join(this.distDir, 'static', this.buildId, '_buildManifest.js'),\n      buildManifestJs\n    )\n    await writeFileAtomic(\n      join(this.distDir, 'static', this.buildId, '_ssgManifest.js'),\n      srcEmptySsgManifest\n    )\n  }\n\n  private async writeClientMiddlewareManifest(): Promise<void> {\n    const middlewareManifest = this.mergeMiddlewareManifests(\n      this.middlewareManifests.values()\n    )\n\n    const matchers = middlewareManifest?.middleware['/']?.matchers || []\n\n    const clientMiddlewareManifestPath = join(\n      this.distDir,\n      'static',\n      this.buildId,\n      `${TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST}`\n    )\n    deleteCache(clientMiddlewareManifestPath)\n    await writeFileAtomic(\n      clientMiddlewareManifestPath,\n      JSON.stringify(matchers, null, 2)\n    )\n  }\n\n  private async writeFallbackBuildManifest(): Promise<void> {\n    const fallbackBuildManifest = this.mergeBuildManifests(\n      [\n        this.buildManifests.get(getEntryKey('pages', 'server', '_app')),\n        this.buildManifests.get(getEntryKey('pages', 'server', '_error')),\n      ].filter(Boolean) as BuildManifest[]\n    )\n    const fallbackBuildManifestPath = join(\n      this.distDir,\n      `fallback-${BUILD_MANIFEST}`\n    )\n    deleteCache(fallbackBuildManifestPath)\n    await writeFileAtomic(\n      fallbackBuildManifestPath,\n      JSON.stringify(fallbackBuildManifest, null, 2)\n    )\n  }\n\n  async loadFontManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.fontManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        `${NEXT_FONT_MANIFEST}.json`,\n        pageName,\n        type\n      )\n    )\n  }\n\n  private mergeFontManifests(manifests: Iterable<NextFontManifest>) {\n    const manifest: NextFontManifest = {\n      app: {},\n      appUsingSizeAdjust: false,\n      pages: {},\n      pagesUsingSizeAdjust: false,\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.app, m.app)\n      Object.assign(manifest.pages, m.pages)\n\n      manifest.appUsingSizeAdjust =\n        manifest.appUsingSizeAdjust || m.appUsingSizeAdjust\n      manifest.pagesUsingSizeAdjust =\n        manifest.pagesUsingSizeAdjust || m.pagesUsingSizeAdjust\n    }\n    return manifest\n  }\n\n  private async writeNextFontManifest(): Promise<void> {\n    const fontManifest = this.mergeFontManifests(this.fontManifests.values())\n    const json = JSON.stringify(fontManifest, null, 2)\n\n    const fontManifestJsonPath = join(\n      this.distDir,\n      'server',\n      `${NEXT_FONT_MANIFEST}.json`\n    )\n    const fontManifestJsPath = join(\n      this.distDir,\n      'server',\n      `${NEXT_FONT_MANIFEST}.js`\n    )\n    deleteCache(fontManifestJsonPath)\n    deleteCache(fontManifestJsPath)\n    await writeFileAtomic(fontManifestJsonPath, json)\n    await writeFileAtomic(\n      fontManifestJsPath,\n      `self.__NEXT_FONT_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadMiddlewareManifest(\n    pageName: string,\n    type: 'pages' | 'app' | 'middleware' | 'instrumentation'\n  ): Promise<void> {\n    this.middlewareManifests.set(\n      getEntryKey(\n        type === 'middleware' || type === 'instrumentation' ? 'root' : type,\n        'server',\n        pageName\n      ),\n      await readPartialManifest(\n        this.distDir,\n        MIDDLEWARE_MANIFEST,\n        pageName,\n        type\n      )\n    )\n  }\n\n  getMiddlewareManifest(key: EntryKey) {\n    return this.middlewareManifests.get(key)\n  }\n\n  deleteMiddlewareManifest(key: EntryKey) {\n    return this.middlewareManifests.delete(key)\n  }\n\n  private mergeMiddlewareManifests(\n    manifests: Iterable<TurbopackMiddlewareManifest>\n  ): MiddlewareManifest {\n    const manifest: MiddlewareManifest = {\n      version: 3,\n      middleware: {},\n      sortedMiddleware: [],\n      functions: {},\n    }\n    let instrumentation: InstrumentationDefinition | undefined = undefined\n    for (const m of manifests) {\n      Object.assign(manifest.functions, m.functions)\n      Object.assign(manifest.middleware, m.middleware)\n      if (m.instrumentation) {\n        instrumentation = m.instrumentation\n      }\n    }\n    const updateFunctionDefinition = (\n      fun: EdgeFunctionDefinition\n    ): EdgeFunctionDefinition => {\n      return {\n        ...fun,\n        files: [...(instrumentation?.files ?? []), ...fun.files],\n      }\n    }\n    for (const key of Object.keys(manifest.middleware)) {\n      const value = manifest.middleware[key]\n      manifest.middleware[key] = updateFunctionDefinition(value)\n    }\n    for (const key of Object.keys(manifest.functions)) {\n      const value = manifest.functions[key]\n      manifest.functions[key] = updateFunctionDefinition(value)\n    }\n    for (const fun of Object.values(manifest.functions).concat(\n      Object.values(manifest.middleware)\n    )) {\n      for (const matcher of fun.matchers) {\n        if (!matcher.regexp) {\n          matcher.regexp = pathToRegexp(matcher.originalSource, [], {\n            delimiter: '/',\n            sensitive: false,\n            strict: true,\n          }).source.replaceAll('\\\\/', '/')\n        }\n      }\n    }\n    manifest.sortedMiddleware = Object.keys(manifest.middleware)\n\n    return manifest\n  }\n\n  private async writeMiddlewareManifest(): Promise<void> {\n    const middlewareManifest = this.mergeMiddlewareManifests(\n      this.middlewareManifests.values()\n    )\n\n    // Normalize regexes as it uses path-to-regexp\n    for (const key in middlewareManifest.middleware) {\n      middlewareManifest.middleware[key].matchers.forEach((matcher) => {\n        if (!matcher.regexp.startsWith('^')) {\n          const parsedPage = tryToParsePath(matcher.regexp)\n          if (parsedPage.error || !parsedPage.regexStr) {\n            throw new Error(`Invalid source: ${matcher.regexp}`)\n          }\n          matcher.regexp = parsedPage.regexStr\n        }\n      })\n    }\n\n    const middlewareManifestPath = join(\n      this.distDir,\n      'server',\n      MIDDLEWARE_MANIFEST\n    )\n    deleteCache(middlewareManifestPath)\n    await writeFileAtomic(\n      middlewareManifestPath,\n      JSON.stringify(middlewareManifest, null, 2)\n    )\n  }\n\n  async loadPagesManifest(pageName: string): Promise<void> {\n    this.pagesManifests.set(\n      getEntryKey('pages', 'server', pageName),\n      await readPartialManifest(this.distDir, PAGES_MANIFEST, pageName)\n    )\n  }\n\n  private mergePagesManifests(manifests: Iterable<PagesManifest>) {\n    const manifest: PagesManifest = {}\n    for (const m of manifests) {\n      Object.assign(manifest, m)\n    }\n    return manifest\n  }\n\n  private async writePagesManifest(): Promise<void> {\n    const pagesManifest = this.mergePagesManifests(this.pagesManifests.values())\n    const pagesManifestPath = join(this.distDir, 'server', PAGES_MANIFEST)\n    deleteCache(pagesManifestPath)\n    await writeFileAtomic(\n      pagesManifestPath,\n      JSON.stringify(pagesManifest, null, 2)\n    )\n  }\n\n  async writeManifests({\n    devRewrites,\n    productionRewrites,\n    entrypoints,\n  }: {\n    devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined\n    productionRewrites: CustomRoutes['rewrites'] | undefined\n    entrypoints: Entrypoints\n  }) {\n    await this.writeActionManifest()\n    await this.writeAppBuildManifest()\n    await this.writeAppPathsManifest()\n    await this.writeBuildManifest(entrypoints, devRewrites, productionRewrites)\n    await this.writeFallbackBuildManifest()\n    await this.writeMiddlewareManifest()\n    await this.writeClientMiddlewareManifest()\n    await this.writeNextFontManifest()\n    await this.writePagesManifest()\n\n    if (process.env.TURBOPACK_STATS != null) {\n      await this.writeWebpackStats()\n    }\n  }\n}\n"],"names":["TurbopackManifestLoader","getManifestPath","page","distDir","name","type","manifestPath","posix","join","getAssetPathFromRoute","readPartialManifest","pageName","isSitemapRoute","test","existsSync","replace","endsWith","metadataPage","addRouteSuffix","addMetadataIdToRoute","removeRouteSuffix","JSON","parse","readFile","delete","key","actionManifests","appBuildManifests","appPathsManifests","buildManifests","fontManifests","middlewareManifests","pagesManifests","webpackStats","loadActionManifest","set","getEntryKey","SERVER_REFERENCE_MANIFEST","mergeActionManifests","manifests","manifest","node","edge","encryptionKey","mergeActionIds","actionEntries","other","action","workers","layer","Object","assign","m","writeActionManifest","actionManifest","values","actionManifestJsonPath","actionManifestJsPath","json","stringify","deleteCache","writeFileAtomic","loadAppBuildManifest","APP_BUILD_MANIFEST","mergeAppBuildManifests","pages","writeAppBuildManifest","appBuildManifest","appBuildManifestPath","loadAppPathsManifest","APP_PATHS_MANIFEST","writeAppPathsManifest","appPathsManifest","mergePagesManifests","appPathsManifestPath","writeWebpackStats","mergeWebpackStats","path","WEBPACK_STATS","loadBuildManifest","BUILD_MANIFEST","loadWebpackStats","statsFiles","entrypoints","assets","Map","chunks","modules","statsFile","k","v","entries","asset","has","chunk","module","id","existing","get","includes","push","mergeBuildManifests","devFiles","ampDevFiles","polyfillFiles","lowPriorityFiles","buildId","rootMainFiles","ampFirstPages","length","writeBuildManifest","devRewrites","productionRewrites","rewrites","beforeFiles","map","processRoute","afterFiles","fallback","buildManifest","buildManifestPath","middlewareBuildManifestPath","MIDDLEWARE_BUILD_MANIFEST","interceptionRewriteManifestPath","INTERCEPTION_ROUTE_REWRITE_MANIFEST","interceptionRewrites","filter","isInterceptionRouteRewrite","pagesKeys","keys","global","app","error","sortedPageKeys","getSortedRoutes","content","__rewrites","normalizeRewritesForBuildManifest","fromEntries","pathname","sortedPages","buildManifestJs","srcEmptySsgManifest","writeClientMiddlewareManifest","middlewareManifest","mergeMiddlewareManifests","matchers","middleware","clientMiddlewareManifestPath","TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST","writeFallbackBuildManifest","fallbackBuildManifest","Boolean","fallbackBuildManifestPath","loadFontManifest","NEXT_FONT_MANIFEST","mergeFontManifests","appUsingSizeAdjust","pagesUsingSizeAdjust","writeNextFontManifest","fontManifest","fontManifestJsonPath","fontManifestJsPath","loadMiddlewareManifest","MIDDLEWARE_MANIFEST","getMiddlewareManifest","deleteMiddlewareManifest","version","sortedMiddleware","functions","instrumentation","undefined","updateFunctionDefinition","fun","files","value","concat","matcher","regexp","pathToRegexp","originalSource","delimiter","sensitive","strict","source","replaceAll","writeMiddlewareManifest","forEach","startsWith","parsedPage","tryToParsePath","regexStr","Error","middlewareManifestPath","loadPagesManifest","PAGES_MANIFEST","writePagesManifest","pagesManifest","pagesManifestPath","writeManifests","process","env","TURBOPACK_STATS","constructor"],"mappings":"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"}