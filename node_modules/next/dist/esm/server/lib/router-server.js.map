{"version":3,"sources":["../../../src/server/lib/router-server.ts"],"sourcesContent":["// this must come first as it includes require hooks\nimport type { WorkerRequestHandler, WorkerUpgradeHandler } from './types'\nimport type { DevBundler, ServerFields } from './router-utils/setup-dev-bundler'\nimport type { NextUrlWithParsedQuery, RequestMeta } from '../request-meta'\n\n// This is required before other imports to ensure the require hook is setup.\nimport '../node-environment'\nimport '../require-hook'\n\nimport url from 'url'\nimport path from 'path'\nimport loadConfig from '../config'\nimport { serveStatic } from '../serve-static'\nimport setupDebug from 'next/dist/compiled/debug'\nimport * as Log from '../../build/output/log'\nimport { DecodeError } from '../../shared/lib/utils'\nimport { findPagesDir } from '../../lib/find-pages-dir'\nimport { setupFsCheck } from './router-utils/filesystem'\nimport { proxyRequest } from './router-utils/proxy-request'\nimport { isAbortError, pipeToNodeResponse } from '../pipe-readable'\nimport { getResolveRoutes } from './router-utils/resolve-routes'\nimport { addRequestMeta, getRequestMeta } from '../request-meta'\nimport { pathHasPrefix } from '../../shared/lib/router/utils/path-has-prefix'\nimport { removePathPrefix } from '../../shared/lib/router/utils/remove-path-prefix'\nimport setupCompression from 'next/dist/compiled/compression'\nimport { NoFallbackError } from '../base-server'\nimport { signalFromNodeResponse } from '../web/spec-extension/adapters/next-request'\nimport { isPostpone } from './router-utils/is-postpone'\nimport { parseUrl as parseUrlUtil } from '../../shared/lib/router/utils/parse-url'\n\nimport {\n  PHASE_PRODUCTION_SERVER,\n  PHASE_DEVELOPMENT_SERVER,\n  UNDERSCORE_NOT_FOUND_ROUTE,\n} from '../../shared/lib/constants'\nimport { RedirectStatusCode } from '../../client/components/redirect-status-code'\nimport { DevBundlerService } from './dev-bundler-service'\nimport { type Span, trace } from '../../trace'\nimport { ensureLeadingSlash } from '../../shared/lib/page-path/ensure-leading-slash'\nimport { getNextPathnameInfo } from '../../shared/lib/router/utils/get-next-pathname-info'\nimport { getHostname } from '../../shared/lib/get-hostname'\nimport { detectDomainLocale } from '../../shared/lib/i18n/detect-domain-locale'\nimport { MockedResponse } from './mock-request'\nimport {\n  HMR_ACTIONS_SENT_TO_BROWSER,\n  type AppIsrManifestAction,\n} from '../dev/hot-reloader-types'\nimport { normalizedAssetPrefix } from '../../shared/lib/normalized-asset-prefix'\nimport { NEXT_PATCH_SYMBOL } from './patch-fetch'\nimport type { ServerInitResult } from './render-server'\nimport { filterInternalHeaders } from './server-ipc/utils'\n\nconst debug = setupDebug('next:router-server:main')\nconst isNextFont = (pathname: string | null) =>\n  pathname && /\\/media\\/[^/]+\\.(woff|woff2|eot|ttf|otf)$/.test(pathname)\n\nexport type RenderServer = Pick<\n  typeof import('./render-server'),\n  | 'initialize'\n  | 'clearModuleContext'\n  | 'propagateServerField'\n  | 'getServerField'\n>\n\nexport interface LazyRenderServerInstance {\n  instance?: RenderServer\n}\n\nconst requestHandlers: Record<string, WorkerRequestHandler> = {}\n\nexport async function initialize(opts: {\n  dir: string\n  port: number\n  dev: boolean\n  onDevServerCleanup: ((listener: () => Promise<void>) => void) | undefined\n  server?: import('http').Server\n  minimalMode?: boolean\n  hostname?: string\n  keepAliveTimeout?: number\n  customServer?: boolean\n  experimentalHttpsServer?: boolean\n  startServerSpan?: Span\n  quiet?: boolean\n}): Promise<ServerInitResult> {\n  if (!process.env.NODE_ENV) {\n    // @ts-ignore not readonly\n    process.env.NODE_ENV = opts.dev ? 'development' : 'production'\n  }\n\n  const config = await loadConfig(\n    opts.dev ? PHASE_DEVELOPMENT_SERVER : PHASE_PRODUCTION_SERVER,\n    opts.dir,\n    { silent: false }\n  )\n\n  let compress: ReturnType<typeof setupCompression> | undefined\n\n  if (config?.compress !== false) {\n    compress = setupCompression()\n  }\n\n  const fsChecker = await setupFsCheck({\n    dev: opts.dev,\n    dir: opts.dir,\n    config,\n    minimalMode: opts.minimalMode,\n  })\n\n  const renderServer: LazyRenderServerInstance = {}\n\n  let developmentBundler: DevBundler | undefined\n\n  let devBundlerService: DevBundlerService | undefined\n\n  let originalFetch = globalThis.fetch\n\n  if (opts.dev) {\n    const { Telemetry } =\n      require('../../telemetry/storage') as typeof import('../../telemetry/storage')\n\n    const telemetry = new Telemetry({\n      distDir: path.join(opts.dir, config.distDir),\n    })\n    const { pagesDir, appDir } = findPagesDir(opts.dir)\n\n    const { setupDevBundler } =\n      require('./router-utils/setup-dev-bundler') as typeof import('./router-utils/setup-dev-bundler')\n\n    const resetFetch = () => {\n      globalThis.fetch = originalFetch\n      ;(globalThis as Record<symbol, unknown>)[NEXT_PATCH_SYMBOL] = false\n    }\n\n    const setupDevBundlerSpan = opts.startServerSpan\n      ? opts.startServerSpan.traceChild('setup-dev-bundler')\n      : trace('setup-dev-bundler')\n    developmentBundler = await setupDevBundlerSpan.traceAsyncFn(() =>\n      setupDevBundler({\n        // Passed here but the initialization of this object happens below, doing the initialization before the setupDev call breaks.\n        renderServer,\n        appDir,\n        pagesDir,\n        telemetry,\n        fsChecker,\n        dir: opts.dir,\n        nextConfig: config,\n        isCustomServer: opts.customServer,\n        turbo: !!process.env.TURBOPACK,\n        port: opts.port,\n        onDevServerCleanup: opts.onDevServerCleanup,\n        resetFetch,\n      })\n    )\n\n    devBundlerService = new DevBundlerService(\n      developmentBundler,\n      // The request handler is assigned below, this allows us to create a lazy\n      // reference to it.\n      (req, res) => {\n        return requestHandlers[opts.dir](req, res)\n      }\n    )\n  }\n\n  renderServer.instance =\n    require('./render-server') as typeof import('./render-server')\n\n  const requestHandlerImpl: WorkerRequestHandler = async (req, res) => {\n    // internal headers should not be honored by the request handler\n    if (!process.env.NEXT_PRIVATE_TEST_HEADERS) {\n      filterInternalHeaders(req.headers)\n    }\n\n    if (\n      !opts.minimalMode &&\n      config.i18n &&\n      config.i18n.localeDetection !== false\n    ) {\n      const urlParts = (req.url || '').split('?', 1)\n      let urlNoQuery = urlParts[0] || ''\n\n      if (config.basePath) {\n        urlNoQuery = removePathPrefix(urlNoQuery, config.basePath)\n      }\n\n      const pathnameInfo = getNextPathnameInfo(urlNoQuery, {\n        nextConfig: config,\n      })\n\n      const domainLocale = detectDomainLocale(\n        config.i18n.domains,\n        getHostname({ hostname: urlNoQuery }, req.headers)\n      )\n\n      const defaultLocale =\n        domainLocale?.defaultLocale || config.i18n.defaultLocale\n\n      const { getLocaleRedirect } =\n        require('../../shared/lib/i18n/get-locale-redirect') as typeof import('../../shared/lib/i18n/get-locale-redirect')\n\n      const parsedUrl = parseUrlUtil((req.url || '')?.replace(/^\\/+/, '/'))\n\n      const redirect = getLocaleRedirect({\n        defaultLocale,\n        domainLocale,\n        headers: req.headers,\n        nextConfig: config,\n        pathLocale: pathnameInfo.locale,\n        urlParsed: {\n          ...parsedUrl,\n          pathname: pathnameInfo.locale\n            ? `/${pathnameInfo.locale}${urlNoQuery}`\n            : urlNoQuery,\n        },\n      })\n\n      if (redirect) {\n        res.setHeader('Location', redirect)\n        res.statusCode = RedirectStatusCode.TemporaryRedirect\n        res.end(redirect)\n        return\n      }\n    }\n\n    if (compress) {\n      // @ts-expect-error not express req/res\n      compress(req, res, () => {})\n    }\n    req.on('error', (_err) => {\n      // TODO: log socket errors?\n    })\n    res.on('error', (_err) => {\n      // TODO: log socket errors?\n    })\n\n    const invokedOutputs = new Set<string>()\n\n    async function invokeRender(\n      parsedUrl: NextUrlWithParsedQuery,\n      invokePath: string,\n      handleIndex: number,\n      additionalRequestMeta?: RequestMeta\n    ) {\n      // invokeRender expects /api routes to not be locale prefixed\n      // so normalize here before continuing\n      if (\n        config.i18n &&\n        removePathPrefix(invokePath, config.basePath).startsWith(\n          `/${getRequestMeta(req, 'locale')}/api`\n        )\n      ) {\n        invokePath = fsChecker.handleLocale(\n          removePathPrefix(invokePath, config.basePath)\n        ).pathname\n      }\n\n      if (\n        req.headers['x-nextjs-data'] &&\n        fsChecker.getMiddlewareMatchers()?.length &&\n        removePathPrefix(invokePath, config.basePath) === '/404'\n      ) {\n        res.setHeader('x-nextjs-matched-path', parsedUrl.pathname || '')\n        res.statusCode = 404\n        res.setHeader('content-type', 'application/json')\n        res.end('{}')\n        return null\n      }\n\n      if (!handlers) {\n        throw new Error('Failed to initialize render server')\n      }\n\n      addRequestMeta(req, 'invokePath', invokePath)\n      addRequestMeta(req, 'invokeQuery', parsedUrl.query)\n      addRequestMeta(req, 'middlewareInvoke', false)\n\n      for (const key in additionalRequestMeta || {}) {\n        addRequestMeta(\n          req,\n          key as keyof RequestMeta,\n          additionalRequestMeta![key as keyof RequestMeta]\n        )\n      }\n\n      debug('invokeRender', req.url, req.headers)\n\n      try {\n        const initResult =\n          await renderServer?.instance?.initialize(renderServerOpts)\n        try {\n          await initResult?.requestHandler(req, res)\n        } catch (err) {\n          if (err instanceof NoFallbackError) {\n            // eslint-disable-next-line\n            await handleRequest(handleIndex + 1)\n            return\n          }\n          throw err\n        }\n        return\n      } catch (e) {\n        // If the client aborts before we can receive a response object (when\n        // the headers are flushed), then we can early exit without further\n        // processing.\n        if (isAbortError(e)) {\n          return\n        }\n        throw e\n      }\n    }\n\n    const handleRequest = async (handleIndex: number) => {\n      if (handleIndex > 5) {\n        throw new Error(`Attempted to handle request too many times ${req.url}`)\n      }\n\n      // handle hot-reloader first\n      if (developmentBundler) {\n        const origUrl = req.url || '/'\n\n        if (config.basePath && pathHasPrefix(origUrl, config.basePath)) {\n          req.url = removePathPrefix(origUrl, config.basePath)\n        }\n        const parsedUrl = url.parse(req.url || '/')\n\n        const hotReloaderResult = await developmentBundler.hotReloader.run(\n          req,\n          res,\n          parsedUrl\n        )\n\n        if (hotReloaderResult.finished) {\n          return hotReloaderResult\n        }\n        req.url = origUrl\n      }\n\n      const {\n        finished,\n        parsedUrl,\n        statusCode,\n        resHeaders,\n        bodyStream,\n        matchedOutput,\n      } = await resolveRoutes({\n        req,\n        res,\n        isUpgradeReq: false,\n        signal: signalFromNodeResponse(res),\n        invokedOutputs,\n      })\n\n      if (res.closed || res.finished) {\n        return\n      }\n\n      if (developmentBundler && matchedOutput?.type === 'devVirtualFsItem') {\n        const origUrl = req.url || '/'\n\n        if (config.basePath && pathHasPrefix(origUrl, config.basePath)) {\n          req.url = removePathPrefix(origUrl, config.basePath)\n        }\n\n        if (resHeaders) {\n          for (const key of Object.keys(resHeaders)) {\n            res.setHeader(key, resHeaders[key])\n          }\n        }\n        const result = await developmentBundler.requestHandler(req, res)\n\n        if (result.finished) {\n          return\n        }\n        // TODO: throw invariant if we resolved to this but it wasn't handled?\n        req.url = origUrl\n      }\n\n      debug('requestHandler!', req.url, {\n        matchedOutput,\n        statusCode,\n        resHeaders,\n        bodyStream: !!bodyStream,\n        parsedUrl: {\n          pathname: parsedUrl.pathname,\n          query: parsedUrl.query,\n        },\n        finished,\n      })\n\n      // apply any response headers from routing\n      for (const key of Object.keys(resHeaders || {})) {\n        res.setHeader(key, resHeaders[key])\n      }\n\n      // handle redirect\n      if (!bodyStream && statusCode && statusCode > 300 && statusCode < 400) {\n        const destination = url.format(parsedUrl)\n        res.statusCode = statusCode\n        res.setHeader('location', destination)\n\n        if (statusCode === RedirectStatusCode.PermanentRedirect) {\n          res.setHeader('Refresh', `0;url=${destination}`)\n        }\n        return res.end(destination)\n      }\n\n      // handle middleware body response\n      if (bodyStream) {\n        res.statusCode = statusCode || 200\n        return await pipeToNodeResponse(bodyStream, res)\n      }\n\n      if (finished && parsedUrl.protocol) {\n        return await proxyRequest(\n          req,\n          res,\n          parsedUrl,\n          undefined,\n          getRequestMeta(req, 'clonableBody')?.cloneBodyStream(),\n          config.experimental.proxyTimeout\n        )\n      }\n\n      if (matchedOutput?.fsPath && matchedOutput.itemPath) {\n        if (\n          opts.dev &&\n          (fsChecker.appFiles.has(matchedOutput.itemPath) ||\n            fsChecker.pageFiles.has(matchedOutput.itemPath))\n        ) {\n          res.statusCode = 500\n          const message = `A conflicting public file and page file was found for path ${matchedOutput.itemPath} https://nextjs.org/docs/messages/conflicting-public-file-page`\n          await invokeRender(parsedUrl, '/_error', handleIndex, {\n            invokeStatus: 500,\n            invokeError: new Error(message),\n          })\n          Log.error(message)\n          return\n        }\n\n        if (\n          !res.getHeader('cache-control') &&\n          matchedOutput.type === 'nextStaticFolder'\n        ) {\n          if (opts.dev && !isNextFont(parsedUrl.pathname)) {\n            res.setHeader('Cache-Control', 'no-store, must-revalidate')\n          } else {\n            res.setHeader(\n              'Cache-Control',\n              'public, max-age=31536000, immutable'\n            )\n          }\n        }\n        if (!(req.method === 'GET' || req.method === 'HEAD')) {\n          res.setHeader('Allow', ['GET', 'HEAD'])\n          res.statusCode = 405\n          return await invokeRender(\n            url.parse('/405', true),\n            '/405',\n            handleIndex,\n            {\n              invokeStatus: 405,\n            }\n          )\n        }\n\n        try {\n          return await serveStatic(req, res, matchedOutput.itemPath, {\n            root: matchedOutput.itemsRoot,\n            // Ensures that etags are not generated for static files when disabled.\n            etag: config.generateEtags,\n          })\n        } catch (err: any) {\n          /**\n           * Hardcoded every possible error status code that could be thrown by \"serveStatic\" method\n           * This is done by searching \"this.error\" inside \"send\" module's source code:\n           * https://github.com/pillarjs/send/blob/master/index.js\n           * https://github.com/pillarjs/send/blob/develop/index.js\n           */\n          const POSSIBLE_ERROR_CODE_FROM_SERVE_STATIC = new Set([\n            // send module will throw 500 when header is already sent or fs.stat error happens\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L392\n            // Note: we will use Next.js built-in 500 page to handle 500 errors\n            // 500,\n\n            // send module will throw 404 when file is missing\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L421\n            // Note: we will use Next.js built-in 404 page to handle 404 errors\n            // 404,\n\n            // send module will throw 403 when redirecting to a directory without enabling directory listing\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L484\n            // Note: Next.js throws a different error (without status code) for directory listing\n            // 403,\n\n            // send module will throw 400 when fails to normalize the path\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L520\n            400,\n\n            // send module will throw 412 with conditional GET request\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L632\n            412,\n\n            // send module will throw 416 when range is not satisfiable\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L669\n            416,\n          ])\n\n          let validErrorStatus = POSSIBLE_ERROR_CODE_FROM_SERVE_STATIC.has(\n            err.statusCode\n          )\n\n          // normalize non-allowed status codes\n          if (!validErrorStatus) {\n            ;(err as any).statusCode = 400\n          }\n\n          if (typeof err.statusCode === 'number') {\n            const invokePath = `/${err.statusCode}`\n            const invokeStatus = err.statusCode\n            res.statusCode = err.statusCode\n            return await invokeRender(\n              url.parse(invokePath, true),\n              invokePath,\n              handleIndex,\n              {\n                invokeStatus,\n              }\n            )\n          }\n          throw err\n        }\n      }\n\n      if (matchedOutput) {\n        invokedOutputs.add(matchedOutput.itemPath)\n\n        return await invokeRender(\n          parsedUrl,\n          parsedUrl.pathname || '/',\n          handleIndex,\n          {\n            invokeOutput: matchedOutput.itemPath,\n          }\n        )\n      }\n\n      // 404 case\n      res.setHeader(\n        'Cache-Control',\n        'private, no-cache, no-store, max-age=0, must-revalidate'\n      )\n\n      // Short-circuit favicon.ico serving so that the 404 page doesn't get built as favicon is requested by the browser when loading any route.\n      if (opts.dev && !matchedOutput && parsedUrl.pathname === '/favicon.ico') {\n        res.statusCode = 404\n        res.end('')\n        return null\n      }\n\n      const appNotFound = opts.dev\n        ? developmentBundler?.serverFields.hasAppNotFound\n        : await fsChecker.getItem(UNDERSCORE_NOT_FOUND_ROUTE)\n\n      res.statusCode = 404\n\n      if (appNotFound) {\n        return await invokeRender(\n          parsedUrl,\n          UNDERSCORE_NOT_FOUND_ROUTE,\n          handleIndex,\n          {\n            invokeStatus: 404,\n          }\n        )\n      }\n\n      await invokeRender(parsedUrl, '/404', handleIndex, {\n        invokeStatus: 404,\n      })\n    }\n\n    try {\n      await handleRequest(0)\n    } catch (err) {\n      try {\n        let invokePath = '/500'\n        let invokeStatus = '500'\n\n        if (err instanceof DecodeError) {\n          invokePath = '/400'\n          invokeStatus = '400'\n        } else {\n          console.error(err)\n        }\n        res.statusCode = Number(invokeStatus)\n        return await invokeRender(url.parse(invokePath, true), invokePath, 0, {\n          invokeStatus: res.statusCode,\n        })\n      } catch (err2) {\n        console.error(err2)\n      }\n      res.statusCode = 500\n      res.end('Internal Server Error')\n    }\n  }\n\n  let requestHandler: WorkerRequestHandler = requestHandlerImpl\n  if (config.experimental.testProxy) {\n    // Intercept fetch and other testmode apis.\n    const { wrapRequestHandlerWorker, interceptTestApis } =\n      require('next/dist/experimental/testmode/server') as typeof import('next/src/experimental/testmode/server')\n    requestHandler = wrapRequestHandlerWorker(requestHandler)\n    interceptTestApis()\n    // We treat the intercepted fetch as \"original\" fetch that should be reset to during HMR.\n    originalFetch = globalThis.fetch\n  }\n  requestHandlers[opts.dir] = requestHandler\n\n  const renderServerOpts: Parameters<RenderServer['initialize']>[0] = {\n    port: opts.port,\n    dir: opts.dir,\n    hostname: opts.hostname,\n    minimalMode: opts.minimalMode,\n    dev: !!opts.dev,\n    server: opts.server,\n    serverFields: {\n      ...(developmentBundler?.serverFields || {}),\n      setIsrStatus: devBundlerService?.setIsrStatus.bind(devBundlerService),\n    } satisfies ServerFields,\n    experimentalTestProxy: !!config.experimental.testProxy,\n    experimentalHttpsServer: !!opts.experimentalHttpsServer,\n    bundlerService: devBundlerService,\n    startServerSpan: opts.startServerSpan,\n    quiet: opts.quiet,\n    onDevServerCleanup: opts.onDevServerCleanup,\n  }\n  renderServerOpts.serverFields.routerServerHandler = requestHandlerImpl\n\n  // pre-initialize workers\n  const handlers = await renderServer.instance.initialize(renderServerOpts)\n\n  const logError = async (\n    type: 'uncaughtException' | 'unhandledRejection',\n    err: Error | undefined\n  ) => {\n    if (isPostpone(err)) {\n      // React postpones that are unhandled might end up logged here but they're\n      // not really errors. They're just part of rendering.\n      return\n    }\n    if (type === 'unhandledRejection') {\n      Log.error('unhandledRejection: ', err)\n    } else if (type === 'uncaughtException') {\n      Log.error('uncaughtException: ', err)\n    }\n  }\n\n  process.on('uncaughtException', logError.bind(null, 'uncaughtException'))\n  process.on('unhandledRejection', logError.bind(null, 'unhandledRejection'))\n\n  const resolveRoutes = getResolveRoutes(\n    fsChecker,\n    config,\n    opts,\n    renderServer.instance,\n    renderServerOpts,\n    developmentBundler?.ensureMiddleware\n  )\n\n  const upgradeHandler: WorkerUpgradeHandler = async (req, socket, head) => {\n    try {\n      req.on('error', (_err) => {\n        // TODO: log socket errors?\n        // console.error(_err);\n      })\n      socket.on('error', (_err) => {\n        // TODO: log socket errors?\n        // console.error(_err);\n      })\n\n      if (opts.dev && developmentBundler && req.url) {\n        const { basePath, assetPrefix } = config\n\n        let hmrPrefix = basePath\n\n        // assetPrefix overrides basePath for HMR path\n        if (assetPrefix) {\n          hmrPrefix = normalizedAssetPrefix(assetPrefix)\n\n          if (URL.canParse(hmrPrefix)) {\n            // remove trailing slash from pathname\n            // return empty string if pathname is '/'\n            // to avoid conflicts with '/_next' below\n            hmrPrefix = new URL(hmrPrefix).pathname.replace(/\\/$/, '')\n          }\n        }\n\n        const isHMRRequest = req.url.startsWith(\n          ensureLeadingSlash(`${hmrPrefix}/_next/webpack-hmr`)\n        )\n\n        // only handle HMR requests if the basePath in the request\n        // matches the basePath for the handler responding to the request\n        if (isHMRRequest) {\n          return developmentBundler.hotReloader.onHMR(\n            req,\n            socket,\n            head,\n            (client) => {\n              client.send(\n                JSON.stringify({\n                  action: HMR_ACTIONS_SENT_TO_BROWSER.ISR_MANIFEST,\n                  data: devBundlerService?.appIsrManifest || {},\n                } satisfies AppIsrManifestAction)\n              )\n            }\n          )\n        }\n      }\n\n      const res = new MockedResponse({\n        resWriter: () => {\n          throw new Error(\n            'Invariant: did not expect response writer to be written to for upgrade request'\n          )\n        },\n      })\n      const { matchedOutput, parsedUrl } = await resolveRoutes({\n        req,\n        res,\n        isUpgradeReq: true,\n        signal: signalFromNodeResponse(socket),\n      })\n\n      // TODO: allow upgrade requests to pages/app paths?\n      // this was not previously supported\n      if (matchedOutput) {\n        return socket.end()\n      }\n\n      if (parsedUrl.protocol) {\n        return await proxyRequest(req, socket, parsedUrl, head)\n      }\n\n      // If there's no matched output, we don't handle the request as user's\n      // custom WS server may be listening on the same path.\n    } catch (err) {\n      console.error('Error handling upgrade request', err)\n      socket.end()\n    }\n  }\n\n  return {\n    requestHandler,\n    upgradeHandler,\n    server: handlers.server,\n    closeUpgraded() {\n      developmentBundler?.hotReloader?.close()\n    },\n  }\n}\n"],"names":["url","path","loadConfig","serveStatic","setupDebug","Log","DecodeError","findPagesDir","setupFsCheck","proxyRequest","isAbortError","pipeToNodeResponse","getResolveRoutes","addRequestMeta","getRequestMeta","pathHasPrefix","removePathPrefix","setupCompression","NoFallbackError","signalFromNodeResponse","isPostpone","parseUrl","parseUrlUtil","PHASE_PRODUCTION_SERVER","PHASE_DEVELOPMENT_SERVER","UNDERSCORE_NOT_FOUND_ROUTE","RedirectStatusCode","DevBundlerService","trace","ensureLeadingSlash","getNextPathnameInfo","getHostname","detectDomainLocale","MockedResponse","HMR_ACTIONS_SENT_TO_BROWSER","normalizedAssetPrefix","NEXT_PATCH_SYMBOL","filterInternalHeaders","debug","isNextFont","pathname","test","requestHandlers","initialize","opts","process","env","NODE_ENV","dev","config","dir","silent","compress","fsChecker","minimalMode","renderServer","developmentBundler","devBundlerService","originalFetch","globalThis","fetch","Telemetry","require","telemetry","distDir","join","pagesDir","appDir","setupDevBundler","resetFetch","setupDevBundlerSpan","startServerSpan","traceChild","traceAsyncFn","nextConfig","isCustomServer","customServer","turbo","TURBOPACK","port","onDevServerCleanup","req","res","instance","requestHandlerImpl","NEXT_PRIVATE_TEST_HEADERS","headers","i18n","localeDetection","urlParts","split","urlNoQuery","basePath","pathnameInfo","domainLocale","domains","hostname","defaultLocale","getLocaleRedirect","parsedUrl","replace","redirect","pathLocale","locale","urlParsed","setHeader","statusCode","TemporaryRedirect","end","on","_err","invokedOutputs","Set","invokeRender","invokePath","handleIndex","additionalRequestMeta","startsWith","handleLocale","getMiddlewareMatchers","length","handlers","Error","query","key","initResult","renderServerOpts","requestHandler","err","handleRequest","e","origUrl","parse","hotReloaderResult","hotReloader","run","finished","resHeaders","bodyStream","matchedOutput","resolveRoutes","isUpgradeReq","signal","closed","type","Object","keys","result","destination","format","PermanentRedirect","protocol","undefined","cloneBodyStream","experimental","proxyTimeout","fsPath","itemPath","appFiles","has","pageFiles","message","invokeStatus","invokeError","error","getHeader","method","root","itemsRoot","etag","generateEtags","POSSIBLE_ERROR_CODE_FROM_SERVE_STATIC","validErrorStatus","add","invokeOutput","appNotFound","serverFields","hasAppNotFound","getItem","console","Number","err2","testProxy","wrapRequestHandlerWorker","interceptTestApis","server","setIsrStatus","bind","experimentalTestProxy","experimentalHttpsServer","bundlerService","quiet","routerServerHandler","logError","ensureMiddleware","upgradeHandler","socket","head","assetPrefix","hmrPrefix","URL","canParse","isHMRRequest","onHMR","client","send","JSON","stringify","action","ISR_MANIFEST","data","appIsrManifest","resWriter","closeUpgraded","close"],"mappings":"AAAA,oDAAoD;AAKpD,6EAA6E;AAC7E,OAAO,sBAAqB;AAC5B,OAAO,kBAAiB;AAExB,OAAOA,SAAS,MAAK;AACrB,OAAOC,UAAU,OAAM;AACvB,OAAOC,gBAAgB,YAAW;AAClC,SAASC,WAAW,QAAQ,kBAAiB;AAC7C,OAAOC,gBAAgB,2BAA0B;AACjD,YAAYC,SAAS,yBAAwB;AAC7C,SAASC,WAAW,QAAQ,yBAAwB;AACpD,SAASC,YAAY,QAAQ,2BAA0B;AACvD,SAASC,YAAY,QAAQ,4BAA2B;AACxD,SAASC,YAAY,QAAQ,+BAA8B;AAC3D,SAASC,YAAY,EAAEC,kBAAkB,QAAQ,mBAAkB;AACnE,SAASC,gBAAgB,QAAQ,gCAA+B;AAChE,SAASC,cAAc,EAAEC,cAAc,QAAQ,kBAAiB;AAChE,SAASC,aAAa,QAAQ,gDAA+C;AAC7E,SAASC,gBAAgB,QAAQ,mDAAkD;AACnF,OAAOC,sBAAsB,iCAAgC;AAC7D,SAASC,eAAe,QAAQ,iBAAgB;AAChD,SAASC,sBAAsB,QAAQ,8CAA6C;AACpF,SAASC,UAAU,QAAQ,6BAA4B;AACvD,SAASC,YAAYC,YAAY,QAAQ,0CAAyC;AAElF,SACEC,uBAAuB,EACvBC,wBAAwB,EACxBC,0BAA0B,QACrB,6BAA4B;AACnC,SAASC,kBAAkB,QAAQ,+CAA8C;AACjF,SAASC,iBAAiB,QAAQ,wBAAuB;AACzD,SAAoBC,KAAK,QAAQ,cAAa;AAC9C,SAASC,kBAAkB,QAAQ,kDAAiD;AACpF,SAASC,mBAAmB,QAAQ,uDAAsD;AAC1F,SAASC,WAAW,QAAQ,gCAA+B;AAC3D,SAASC,kBAAkB,QAAQ,6CAA4C;AAC/E,SAASC,cAAc,QAAQ,iBAAgB;AAC/C,SACEC,2BAA2B,QAEtB,4BAA2B;AAClC,SAASC,qBAAqB,QAAQ,2CAA0C;AAChF,SAASC,iBAAiB,QAAQ,gBAAe;AAEjD,SAASC,qBAAqB,QAAQ,qBAAoB;AAE1D,MAAMC,QAAQlC,WAAW;AACzB,MAAMmC,aAAa,CAACC,WAClBA,YAAY,4CAA4CC,IAAI,CAACD;AAc/D,MAAME,kBAAwD,CAAC;AAE/D,OAAO,eAAeC,WAAWC,IAahC;IACC,IAAI,CAACC,QAAQC,GAAG,CAACC,QAAQ,EAAE;QACzB,0BAA0B;QAC1BF,QAAQC,GAAG,CAACC,QAAQ,GAAGH,KAAKI,GAAG,GAAG,gBAAgB;IACpD;IAEA,MAAMC,SAAS,MAAM/C,WACnB0C,KAAKI,GAAG,GAAGxB,2BAA2BD,yBACtCqB,KAAKM,GAAG,EACR;QAAEC,QAAQ;IAAM;IAGlB,IAAIC;IAEJ,IAAIH,CAAAA,0BAAAA,OAAQG,QAAQ,MAAK,OAAO;QAC9BA,WAAWnC;IACb;IAEA,MAAMoC,YAAY,MAAM7C,aAAa;QACnCwC,KAAKJ,KAAKI,GAAG;QACbE,KAAKN,KAAKM,GAAG;QACbD;QACAK,aAAaV,KAAKU,WAAW;IAC/B;IAEA,MAAMC,eAAyC,CAAC;IAEhD,IAAIC;IAEJ,IAAIC;IAEJ,IAAIC,gBAAgBC,WAAWC,KAAK;IAEpC,IAAIhB,KAAKI,GAAG,EAAE;QACZ,MAAM,EAAEa,SAAS,EAAE,GACjBC,QAAQ;QAEV,MAAMC,YAAY,IAAIF,UAAU;YAC9BG,SAAS/D,KAAKgE,IAAI,CAACrB,KAAKM,GAAG,EAAED,OAAOe,OAAO;QAC7C;QACA,MAAM,EAAEE,QAAQ,EAAEC,MAAM,EAAE,GAAG5D,aAAaqC,KAAKM,GAAG;QAElD,MAAM,EAAEkB,eAAe,EAAE,GACvBN,QAAQ;QAEV,MAAMO,aAAa;YACjBV,WAAWC,KAAK,GAAGF;YACjBC,UAAsC,CAACvB,kBAAkB,GAAG;QAChE;QAEA,MAAMkC,sBAAsB1B,KAAK2B,eAAe,GAC5C3B,KAAK2B,eAAe,CAACC,UAAU,CAAC,uBAChC5C,MAAM;QACV4B,qBAAqB,MAAMc,oBAAoBG,YAAY,CAAC,IAC1DL,gBAAgB;gBACd,6HAA6H;gBAC7Hb;gBACAY;gBACAD;gBACAH;gBACAV;gBACAH,KAAKN,KAAKM,GAAG;gBACbwB,YAAYzB;gBACZ0B,gBAAgB/B,KAAKgC,YAAY;gBACjCC,OAAO,CAAC,CAAChC,QAAQC,GAAG,CAACgC,SAAS;gBAC9BC,MAAMnC,KAAKmC,IAAI;gBACfC,oBAAoBpC,KAAKoC,kBAAkB;gBAC3CX;YACF;QAGFZ,oBAAoB,IAAI9B,kBACtB6B,oBACA,yEAAyE;QACzE,mBAAmB;QACnB,CAACyB,KAAKC;YACJ,OAAOxC,eAAe,CAACE,KAAKM,GAAG,CAAC,CAAC+B,KAAKC;QACxC;IAEJ;IAEA3B,aAAa4B,QAAQ,GACnBrB,QAAQ;IAEV,MAAMsB,qBAA2C,OAAOH,KAAKC;QAC3D,gEAAgE;QAChE,IAAI,CAACrC,QAAQC,GAAG,CAACuC,yBAAyB,EAAE;YAC1ChD,sBAAsB4C,IAAIK,OAAO;QACnC;QAEA,IACE,CAAC1C,KAAKU,WAAW,IACjBL,OAAOsC,IAAI,IACXtC,OAAOsC,IAAI,CAACC,eAAe,KAAK,OAChC;gBAuBgCP;YAtBhC,MAAMQ,WAAW,AAACR,CAAAA,IAAIjF,GAAG,IAAI,EAAC,EAAG0F,KAAK,CAAC,KAAK;YAC5C,IAAIC,aAAaF,QAAQ,CAAC,EAAE,IAAI;YAEhC,IAAIxC,OAAO2C,QAAQ,EAAE;gBACnBD,aAAa3E,iBAAiB2E,YAAY1C,OAAO2C,QAAQ;YAC3D;YAEA,MAAMC,eAAe/D,oBAAoB6D,YAAY;gBACnDjB,YAAYzB;YACd;YAEA,MAAM6C,eAAe9D,mBACnBiB,OAAOsC,IAAI,CAACQ,OAAO,EACnBhE,YAAY;gBAAEiE,UAAUL;YAAW,GAAGV,IAAIK,OAAO;YAGnD,MAAMW,gBACJH,CAAAA,gCAAAA,aAAcG,aAAa,KAAIhD,OAAOsC,IAAI,CAACU,aAAa;YAE1D,MAAM,EAAEC,iBAAiB,EAAE,GACzBpC,QAAQ;YAEV,MAAMqC,YAAY7E,cAAc2D,QAAAA,IAAIjF,GAAG,IAAI,uBAAZ,AAACiF,MAAgBmB,OAAO,CAAC,QAAQ;YAEhE,MAAMC,WAAWH,kBAAkB;gBACjCD;gBACAH;gBACAR,SAASL,IAAIK,OAAO;gBACpBZ,YAAYzB;gBACZqD,YAAYT,aAAaU,MAAM;gBAC/BC,WAAW;oBACT,GAAGL,SAAS;oBACZ3D,UAAUqD,aAAaU,MAAM,GACzB,CAAC,CAAC,EAAEV,aAAaU,MAAM,GAAGZ,YAAY,GACtCA;gBACN;YACF;YAEA,IAAIU,UAAU;gBACZnB,IAAIuB,SAAS,CAAC,YAAYJ;gBAC1BnB,IAAIwB,UAAU,GAAGhF,mBAAmBiF,iBAAiB;gBACrDzB,IAAI0B,GAAG,CAACP;gBACR;YACF;QACF;QAEA,IAAIjD,UAAU;YACZ,uCAAuC;YACvCA,SAAS6B,KAAKC,KAAK,KAAO;QAC5B;QACAD,IAAI4B,EAAE,CAAC,SAAS,CAACC;QACf,2BAA2B;QAC7B;QACA5B,IAAI2B,EAAE,CAAC,SAAS,CAACC;QACf,2BAA2B;QAC7B;QAEA,MAAMC,iBAAiB,IAAIC;QAE3B,eAAeC,aACbd,SAAiC,EACjCe,UAAkB,EAClBC,WAAmB,EACnBC,qBAAmC;gBAiBjC/D;YAfF,6DAA6D;YAC7D,sCAAsC;YACtC,IACEJ,OAAOsC,IAAI,IACXvE,iBAAiBkG,YAAYjE,OAAO2C,QAAQ,EAAEyB,UAAU,CACtD,CAAC,CAAC,EAAEvG,eAAemE,KAAK,UAAU,IAAI,CAAC,GAEzC;gBACAiC,aAAa7D,UAAUiE,YAAY,CACjCtG,iBAAiBkG,YAAYjE,OAAO2C,QAAQ,GAC5CpD,QAAQ;YACZ;YAEA,IACEyC,IAAIK,OAAO,CAAC,gBAAgB,MAC5BjC,mCAAAA,UAAUkE,qBAAqB,uBAA/BlE,iCAAmCmE,MAAM,KACzCxG,iBAAiBkG,YAAYjE,OAAO2C,QAAQ,MAAM,QAClD;gBACAV,IAAIuB,SAAS,CAAC,yBAAyBN,UAAU3D,QAAQ,IAAI;gBAC7D0C,IAAIwB,UAAU,GAAG;gBACjBxB,IAAIuB,SAAS,CAAC,gBAAgB;gBAC9BvB,IAAI0B,GAAG,CAAC;gBACR,OAAO;YACT;YAEA,IAAI,CAACa,UAAU;gBACb,MAAM,qBAA+C,CAA/C,IAAIC,MAAM,uCAAV,qBAAA;2BAAA;gCAAA;kCAAA;gBAA8C;YACtD;YAEA7G,eAAeoE,KAAK,cAAciC;YAClCrG,eAAeoE,KAAK,eAAekB,UAAUwB,KAAK;YAClD9G,eAAeoE,KAAK,oBAAoB;YAExC,IAAK,MAAM2C,OAAOR,yBAAyB,CAAC,EAAG;gBAC7CvG,eACEoE,KACA2C,KACAR,qBAAsB,CAACQ,IAAyB;YAEpD;YAEAtF,MAAM,gBAAgB2C,IAAIjF,GAAG,EAAEiF,IAAIK,OAAO;YAE1C,IAAI;oBAEM/B;gBADR,MAAMsE,aACJ,OAAMtE,iCAAAA,yBAAAA,aAAc4B,QAAQ,qBAAtB5B,uBAAwBZ,UAAU,CAACmF;gBAC3C,IAAI;oBACF,OAAMD,8BAAAA,WAAYE,cAAc,CAAC9C,KAAKC;gBACxC,EAAE,OAAO8C,KAAK;oBACZ,IAAIA,eAAe9G,iBAAiB;wBAClC,2BAA2B;wBAC3B,MAAM+G,cAAcd,cAAc;wBAClC;oBACF;oBACA,MAAMa;gBACR;gBACA;YACF,EAAE,OAAOE,GAAG;gBACV,qEAAqE;gBACrE,mEAAmE;gBACnE,cAAc;gBACd,IAAIxH,aAAawH,IAAI;oBACnB;gBACF;gBACA,MAAMA;YACR;QACF;QAEA,MAAMD,gBAAgB,OAAOd;YAC3B,IAAIA,cAAc,GAAG;gBACnB,MAAM,qBAAkE,CAAlE,IAAIO,MAAM,CAAC,2CAA2C,EAAEzC,IAAIjF,GAAG,EAAE,GAAjE,qBAAA;2BAAA;gCAAA;kCAAA;gBAAiE;YACzE;YAEA,4BAA4B;YAC5B,IAAIwD,oBAAoB;gBACtB,MAAM2E,UAAUlD,IAAIjF,GAAG,IAAI;gBAE3B,IAAIiD,OAAO2C,QAAQ,IAAI7E,cAAcoH,SAASlF,OAAO2C,QAAQ,GAAG;oBAC9DX,IAAIjF,GAAG,GAAGgB,iBAAiBmH,SAASlF,OAAO2C,QAAQ;gBACrD;gBACA,MAAMO,YAAYnG,IAAIoI,KAAK,CAACnD,IAAIjF,GAAG,IAAI;gBAEvC,MAAMqI,oBAAoB,MAAM7E,mBAAmB8E,WAAW,CAACC,GAAG,CAChEtD,KACAC,KACAiB;gBAGF,IAAIkC,kBAAkBG,QAAQ,EAAE;oBAC9B,OAAOH;gBACT;gBACApD,IAAIjF,GAAG,GAAGmI;YACZ;YAEA,MAAM,EACJK,QAAQ,EACRrC,SAAS,EACTO,UAAU,EACV+B,UAAU,EACVC,UAAU,EACVC,aAAa,EACd,GAAG,MAAMC,cAAc;gBACtB3D;gBACAC;gBACA2D,cAAc;gBACdC,QAAQ3H,uBAAuB+D;gBAC/B6B;YACF;YAEA,IAAI7B,IAAI6D,MAAM,IAAI7D,IAAIsD,QAAQ,EAAE;gBAC9B;YACF;YAEA,IAAIhF,sBAAsBmF,CAAAA,iCAAAA,cAAeK,IAAI,MAAK,oBAAoB;gBACpE,MAAMb,UAAUlD,IAAIjF,GAAG,IAAI;gBAE3B,IAAIiD,OAAO2C,QAAQ,IAAI7E,cAAcoH,SAASlF,OAAO2C,QAAQ,GAAG;oBAC9DX,IAAIjF,GAAG,GAAGgB,iBAAiBmH,SAASlF,OAAO2C,QAAQ;gBACrD;gBAEA,IAAI6C,YAAY;oBACd,KAAK,MAAMb,OAAOqB,OAAOC,IAAI,CAACT,YAAa;wBACzCvD,IAAIuB,SAAS,CAACmB,KAAKa,UAAU,CAACb,IAAI;oBACpC;gBACF;gBACA,MAAMuB,SAAS,MAAM3F,mBAAmBuE,cAAc,CAAC9C,KAAKC;gBAE5D,IAAIiE,OAAOX,QAAQ,EAAE;oBACnB;gBACF;gBACA,sEAAsE;gBACtEvD,IAAIjF,GAAG,GAAGmI;YACZ;YAEA7F,MAAM,mBAAmB2C,IAAIjF,GAAG,EAAE;gBAChC2I;gBACAjC;gBACA+B;gBACAC,YAAY,CAAC,CAACA;gBACdvC,WAAW;oBACT3D,UAAU2D,UAAU3D,QAAQ;oBAC5BmF,OAAOxB,UAAUwB,KAAK;gBACxB;gBACAa;YACF;YAEA,0CAA0C;YAC1C,KAAK,MAAMZ,OAAOqB,OAAOC,IAAI,CAACT,cAAc,CAAC,GAAI;gBAC/CvD,IAAIuB,SAAS,CAACmB,KAAKa,UAAU,CAACb,IAAI;YACpC;YAEA,kBAAkB;YAClB,IAAI,CAACc,cAAchC,cAAcA,aAAa,OAAOA,aAAa,KAAK;gBACrE,MAAM0C,cAAcpJ,IAAIqJ,MAAM,CAAClD;gBAC/BjB,IAAIwB,UAAU,GAAGA;gBACjBxB,IAAIuB,SAAS,CAAC,YAAY2C;gBAE1B,IAAI1C,eAAehF,mBAAmB4H,iBAAiB,EAAE;oBACvDpE,IAAIuB,SAAS,CAAC,WAAW,CAAC,MAAM,EAAE2C,aAAa;gBACjD;gBACA,OAAOlE,IAAI0B,GAAG,CAACwC;YACjB;YAEA,kCAAkC;YAClC,IAAIV,YAAY;gBACdxD,IAAIwB,UAAU,GAAGA,cAAc;gBAC/B,OAAO,MAAM/F,mBAAmB+H,YAAYxD;YAC9C;YAEA,IAAIsD,YAAYrC,UAAUoD,QAAQ,EAAE;oBAMhCzI;gBALF,OAAO,MAAML,aACXwE,KACAC,KACAiB,WACAqD,YACA1I,kBAAAA,eAAemE,KAAK,oCAApBnE,gBAAqC2I,eAAe,IACpDxG,OAAOyG,YAAY,CAACC,YAAY;YAEpC;YAEA,IAAIhB,CAAAA,iCAAAA,cAAeiB,MAAM,KAAIjB,cAAckB,QAAQ,EAAE;gBACnD,IACEjH,KAAKI,GAAG,IACPK,CAAAA,UAAUyG,QAAQ,CAACC,GAAG,CAACpB,cAAckB,QAAQ,KAC5CxG,UAAU2G,SAAS,CAACD,GAAG,CAACpB,cAAckB,QAAQ,CAAA,GAChD;oBACA3E,IAAIwB,UAAU,GAAG;oBACjB,MAAMuD,UAAU,CAAC,2DAA2D,EAAEtB,cAAckB,QAAQ,CAAC,8DAA8D,CAAC;oBACpK,MAAM5C,aAAad,WAAW,WAAWgB,aAAa;wBACpD+C,cAAc;wBACdC,aAAa,qBAAkB,CAAlB,IAAIzC,MAAMuC,UAAV,qBAAA;mCAAA;wCAAA;0CAAA;wBAAiB;oBAChC;oBACA5J,IAAI+J,KAAK,CAACH;oBACV;gBACF;gBAEA,IACE,CAAC/E,IAAImF,SAAS,CAAC,oBACf1B,cAAcK,IAAI,KAAK,oBACvB;oBACA,IAAIpG,KAAKI,GAAG,IAAI,CAACT,WAAW4D,UAAU3D,QAAQ,GAAG;wBAC/C0C,IAAIuB,SAAS,CAAC,iBAAiB;oBACjC,OAAO;wBACLvB,IAAIuB,SAAS,CACX,iBACA;oBAEJ;gBACF;gBACA,IAAI,CAAExB,CAAAA,IAAIqF,MAAM,KAAK,SAASrF,IAAIqF,MAAM,KAAK,MAAK,GAAI;oBACpDpF,IAAIuB,SAAS,CAAC,SAAS;wBAAC;wBAAO;qBAAO;oBACtCvB,IAAIwB,UAAU,GAAG;oBACjB,OAAO,MAAMO,aACXjH,IAAIoI,KAAK,CAAC,QAAQ,OAClB,QACAjB,aACA;wBACE+C,cAAc;oBAChB;gBAEJ;gBAEA,IAAI;oBACF,OAAO,MAAM/J,YAAY8E,KAAKC,KAAKyD,cAAckB,QAAQ,EAAE;wBACzDU,MAAM5B,cAAc6B,SAAS;wBAC7B,uEAAuE;wBACvEC,MAAMxH,OAAOyH,aAAa;oBAC5B;gBACF,EAAE,OAAO1C,KAAU;oBACjB;;;;;WAKC,GACD,MAAM2C,wCAAwC,IAAI3D,IAAI;wBACpD,kFAAkF;wBAClF,+FAA+F;wBAC/F,mEAAmE;wBACnE,OAAO;wBAEP,kDAAkD;wBAClD,+FAA+F;wBAC/F,mEAAmE;wBACnE,OAAO;wBAEP,gGAAgG;wBAChG,+FAA+F;wBAC/F,qFAAqF;wBACrF,OAAO;wBAEP,8DAA8D;wBAC9D,+FAA+F;wBAC/F;wBAEA,0DAA0D;wBAC1D,+FAA+F;wBAC/F;wBAEA,2DAA2D;wBAC3D,+FAA+F;wBAC/F;qBACD;oBAED,IAAI4D,mBAAmBD,sCAAsCZ,GAAG,CAC9D/B,IAAItB,UAAU;oBAGhB,qCAAqC;oBACrC,IAAI,CAACkE,kBAAkB;;wBACnB5C,IAAYtB,UAAU,GAAG;oBAC7B;oBAEA,IAAI,OAAOsB,IAAItB,UAAU,KAAK,UAAU;wBACtC,MAAMQ,aAAa,CAAC,CAAC,EAAEc,IAAItB,UAAU,EAAE;wBACvC,MAAMwD,eAAelC,IAAItB,UAAU;wBACnCxB,IAAIwB,UAAU,GAAGsB,IAAItB,UAAU;wBAC/B,OAAO,MAAMO,aACXjH,IAAIoI,KAAK,CAAClB,YAAY,OACtBA,YACAC,aACA;4BACE+C;wBACF;oBAEJ;oBACA,MAAMlC;gBACR;YACF;YAEA,IAAIW,eAAe;gBACjB5B,eAAe8D,GAAG,CAAClC,cAAckB,QAAQ;gBAEzC,OAAO,MAAM5C,aACXd,WACAA,UAAU3D,QAAQ,IAAI,KACtB2E,aACA;oBACE2D,cAAcnC,cAAckB,QAAQ;gBACtC;YAEJ;YAEA,WAAW;YACX3E,IAAIuB,SAAS,CACX,iBACA;YAGF,0IAA0I;YAC1I,IAAI7D,KAAKI,GAAG,IAAI,CAAC2F,iBAAiBxC,UAAU3D,QAAQ,KAAK,gBAAgB;gBACvE0C,IAAIwB,UAAU,GAAG;gBACjBxB,IAAI0B,GAAG,CAAC;gBACR,OAAO;YACT;YAEA,MAAMmE,cAAcnI,KAAKI,GAAG,GACxBQ,sCAAAA,mBAAoBwH,YAAY,CAACC,cAAc,GAC/C,MAAM5H,UAAU6H,OAAO,CAACzJ;YAE5ByD,IAAIwB,UAAU,GAAG;YAEjB,IAAIqE,aAAa;gBACf,OAAO,MAAM9D,aACXd,WACA1E,4BACA0F,aACA;oBACE+C,cAAc;gBAChB;YAEJ;YAEA,MAAMjD,aAAad,WAAW,QAAQgB,aAAa;gBACjD+C,cAAc;YAChB;QACF;QAEA,IAAI;YACF,MAAMjC,cAAc;QACtB,EAAE,OAAOD,KAAK;YACZ,IAAI;gBACF,IAAId,aAAa;gBACjB,IAAIgD,eAAe;gBAEnB,IAAIlC,eAAe1H,aAAa;oBAC9B4G,aAAa;oBACbgD,eAAe;gBACjB,OAAO;oBACLiB,QAAQf,KAAK,CAACpC;gBAChB;gBACA9C,IAAIwB,UAAU,GAAG0E,OAAOlB;gBACxB,OAAO,MAAMjD,aAAajH,IAAIoI,KAAK,CAAClB,YAAY,OAAOA,YAAY,GAAG;oBACpEgD,cAAchF,IAAIwB,UAAU;gBAC9B;YACF,EAAE,OAAO2E,MAAM;gBACbF,QAAQf,KAAK,CAACiB;YAChB;YACAnG,IAAIwB,UAAU,GAAG;YACjBxB,IAAI0B,GAAG,CAAC;QACV;IACF;IAEA,IAAImB,iBAAuC3C;IAC3C,IAAInC,OAAOyG,YAAY,CAAC4B,SAAS,EAAE;QACjC,2CAA2C;QAC3C,MAAM,EAAEC,wBAAwB,EAAEC,iBAAiB,EAAE,GACnD1H,QAAQ;QACViE,iBAAiBwD,yBAAyBxD;QAC1CyD;QACA,yFAAyF;QACzF9H,gBAAgBC,WAAWC,KAAK;IAClC;IACAlB,eAAe,CAACE,KAAKM,GAAG,CAAC,GAAG6E;IAE5B,MAAMD,mBAA8D;QAClE/C,MAAMnC,KAAKmC,IAAI;QACf7B,KAAKN,KAAKM,GAAG;QACb8C,UAAUpD,KAAKoD,QAAQ;QACvB1C,aAAaV,KAAKU,WAAW;QAC7BN,KAAK,CAAC,CAACJ,KAAKI,GAAG;QACfyI,QAAQ7I,KAAK6I,MAAM;QACnBT,cAAc;YACZ,GAAIxH,CAAAA,sCAAAA,mBAAoBwH,YAAY,KAAI,CAAC,CAAC;YAC1CU,YAAY,EAAEjI,qCAAAA,kBAAmBiI,YAAY,CAACC,IAAI,CAAClI;QACrD;QACAmI,uBAAuB,CAAC,CAAC3I,OAAOyG,YAAY,CAAC4B,SAAS;QACtDO,yBAAyB,CAAC,CAACjJ,KAAKiJ,uBAAuB;QACvDC,gBAAgBrI;QAChBc,iBAAiB3B,KAAK2B,eAAe;QACrCwH,OAAOnJ,KAAKmJ,KAAK;QACjB/G,oBAAoBpC,KAAKoC,kBAAkB;IAC7C;IACA8C,iBAAiBkD,YAAY,CAACgB,mBAAmB,GAAG5G;IAEpD,yBAAyB;IACzB,MAAMqC,WAAW,MAAMlE,aAAa4B,QAAQ,CAACxC,UAAU,CAACmF;IAExD,MAAMmE,WAAW,OACfjD,MACAhB;QAEA,IAAI5G,WAAW4G,MAAM;YACnB,0EAA0E;YAC1E,qDAAqD;YACrD;QACF;QACA,IAAIgB,SAAS,sBAAsB;YACjC3I,IAAI+J,KAAK,CAAC,wBAAwBpC;QACpC,OAAO,IAAIgB,SAAS,qBAAqB;YACvC3I,IAAI+J,KAAK,CAAC,uBAAuBpC;QACnC;IACF;IAEAnF,QAAQgE,EAAE,CAAC,qBAAqBoF,SAASN,IAAI,CAAC,MAAM;IACpD9I,QAAQgE,EAAE,CAAC,sBAAsBoF,SAASN,IAAI,CAAC,MAAM;IAErD,MAAM/C,gBAAgBhI,iBACpByC,WACAJ,QACAL,MACAW,aAAa4B,QAAQ,EACrB2C,kBACAtE,sCAAAA,mBAAoB0I,gBAAgB;IAGtC,MAAMC,iBAAuC,OAAOlH,KAAKmH,QAAQC;QAC/D,IAAI;YACFpH,IAAI4B,EAAE,CAAC,SAAS,CAACC;YACf,2BAA2B;YAC3B,uBAAuB;YACzB;YACAsF,OAAOvF,EAAE,CAAC,SAAS,CAACC;YAClB,2BAA2B;YAC3B,uBAAuB;YACzB;YAEA,IAAIlE,KAAKI,GAAG,IAAIQ,sBAAsByB,IAAIjF,GAAG,EAAE;gBAC7C,MAAM,EAAE4F,QAAQ,EAAE0G,WAAW,EAAE,GAAGrJ;gBAElC,IAAIsJ,YAAY3G;gBAEhB,8CAA8C;gBAC9C,IAAI0G,aAAa;oBACfC,YAAYpK,sBAAsBmK;oBAElC,IAAIE,IAAIC,QAAQ,CAACF,YAAY;wBAC3B,sCAAsC;wBACtC,yCAAyC;wBACzC,yCAAyC;wBACzCA,YAAY,IAAIC,IAAID,WAAW/J,QAAQ,CAAC4D,OAAO,CAAC,OAAO;oBACzD;gBACF;gBAEA,MAAMsG,eAAezH,IAAIjF,GAAG,CAACqH,UAAU,CACrCxF,mBAAmB,GAAG0K,UAAU,kBAAkB,CAAC;gBAGrD,0DAA0D;gBAC1D,iEAAiE;gBACjE,IAAIG,cAAc;oBAChB,OAAOlJ,mBAAmB8E,WAAW,CAACqE,KAAK,CACzC1H,KACAmH,QACAC,MACA,CAACO;wBACCA,OAAOC,IAAI,CACTC,KAAKC,SAAS,CAAC;4BACbC,QAAQ9K,4BAA4B+K,YAAY;4BAChDC,MAAMzJ,CAAAA,qCAAAA,kBAAmB0J,cAAc,KAAI,CAAC;wBAC9C;oBAEJ;gBAEJ;YACF;YAEA,MAAMjI,MAAM,IAAIjD,eAAe;gBAC7BmL,WAAW;oBACT,MAAM,qBAEL,CAFK,IAAI1F,MACR,mFADI,qBAAA;+BAAA;oCAAA;sCAAA;oBAEN;gBACF;YACF;YACA,MAAM,EAAEiB,aAAa,EAAExC,SAAS,EAAE,GAAG,MAAMyC,cAAc;gBACvD3D;gBACAC;gBACA2D,cAAc;gBACdC,QAAQ3H,uBAAuBiL;YACjC;YAEA,mDAAmD;YACnD,oCAAoC;YACpC,IAAIzD,eAAe;gBACjB,OAAOyD,OAAOxF,GAAG;YACnB;YAEA,IAAIT,UAAUoD,QAAQ,EAAE;gBACtB,OAAO,MAAM9I,aAAawE,KAAKmH,QAAQjG,WAAWkG;YACpD;QAEA,sEAAsE;QACtE,sDAAsD;QACxD,EAAE,OAAOrE,KAAK;YACZmD,QAAQf,KAAK,CAAC,kCAAkCpC;YAChDoE,OAAOxF,GAAG;QACZ;IACF;IAEA,OAAO;QACLmB;QACAoE;QACAV,QAAQhE,SAASgE,MAAM;QACvB4B;gBACE7J;YAAAA,uCAAAA,kCAAAA,mBAAoB8E,WAAW,qBAA/B9E,gCAAiC8J,KAAK;QACxC;IACF;AACF"}